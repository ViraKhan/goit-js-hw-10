import iziToast from 'izitoast';
import 'izitoast/dist/css/iziToast.min.css';

const form = document.querySelector('.form');

if (form) {
  form.addEventListener('submit', handleSubmit);
  console.log('‚úÖ –§–æ—Ä–º–∞ –∑–Ω–∞–π–¥–µ–Ω–∞, –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–Ω–æ');
} else {
  console.error('‚ùå –§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä class="form" —É HTML');
}

function handleSubmit(event) {
  event.preventDefault();

  const { delay, state } = event.target.elements;
  const delayValue = Number(delay.value);
  const stateValue = state.value;

  console.log('üì® –°–∞–±–º—ñ—Ç —Ñ–æ—Ä–º–∏ –≤—ñ–¥–±—É–≤—Å—è');
  console.log('‚è± –ó–∞—Ç—Ä–∏–º–∫–∞:', delayValue);
  console.log('üì¶ –°—Ç–∞—Ç—É—Å:', stateValue);

  new Promise((resolve, reject) => {
    setTimeout(() => {
      if (stateValue === 'fulfilled') {
        resolve(delayValue);
      } else {
        reject(delayValue);
      }
    }, delayValue);
  })
    .then((delay) => {
      console.log('‚úÖ –ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–Ω–æ');
      iziToast.success({
        message: `‚úÖ Fulfilled promise in ${delay}ms`,
        position: 'topRight',
        timeout: 3000,
      });
    })
    .catch((delay) => {
      console.log('‚ùå –ü—Ä–æ–º—ñ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ');
      iziToast.error({
        message: `‚ùå Rejected promise in ${delay}ms`,
        position: 'topRight',
        timeout: 3000,
      });
    });
}
